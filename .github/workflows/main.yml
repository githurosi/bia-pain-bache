name: Auto Update Worker

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 1 * * *"
  workflow_dispatch:
    inputs:
      force_update:
        description: '强制更新（跳过版本检查）'
        type: boolean
        default: false

permissions:
  contents: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  update:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      new_version: ${{ steps.update.outputs.new_version }}
    steps:
      - name: 精确检出仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: target-repo
          token: ${{ secrets.GITHUB_TOKEN }}
          # 添加安全校验
          ref: ${{ github.event.repository.default_branch }}

      - name: 依赖安装
        run: |
          sudo apt-get update
          sudo apt-get install -y pigz jq

      - name: 版本同步引擎
        id: update
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          start_time=$(date +%s)
          
          log() { 
            local level=$1
            shift
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] [$level] $@"
          }

          # 初始化参数
          FORCE_UPDATE=${{ inputs.force_update }}
          LOCAL_VERSION=$(cat target-repo/version.txt 2>/dev/null || echo "0.0.0")
          REPO_OWNER="bia-pain-bache"
          REPO_NAME="BPB-Worker-Panel"
          SOURCE_ASSET="worker-source.zip"  # 明确指定源码包名称

          # 安全校验
          if [[ ! "$REPO_OWNER" =~ ^[a-z0-9-]+$ ]] || [[ ! "$REPO_NAME" =~ ^[a-z0-9-]+$ ]]; then
            log "ERROR" "非法仓库标识"
            exit 1
          fi

          log "INFO" "开始版本同步流程（本地版本：$LOCAL_VERSION）"

          # 获取版本元数据
          API_URL="https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/releases/latest"
          RESPONSE=$(curl -sS --retry 5 \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "$API_URL")

          # 响应验证
          if ! jq -e '.tag_name' >/dev/null <<< "$RESPONSE"; then
            log "ERROR" "API响应异常：$(jq .message <<< "$RESPONSE" || echo "无效响应")"
            exit 1
          fi

          # 解析数据
          TAG_NAME=$(jq -r '.tag_name' <<< "$RESPONSE")
          DOWNLOAD_URL=$(jq -r ".assets[] | select(.name == \"$SOURCE_ASSET\") | .browser_download_url" <<< "$RESPONSE")

          # 版本校验
          if [ -z "$DOWNLOAD_URL" ]; then
            log "ERROR" "未找到源码包：$SOURCE_ASSET"
            exit 1
          fi

          # 版本比较
          if [ "$LOCAL_VERSION" = "$TAG_NAME" ] && [ "$FORCE_UPDATE" != "true" ]; then
            log "INFO" "版本无变化（当前：$TAG_NAME）"
            echo "new_version=$TAG_NAME" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 安全下载
          if ! wget --tries=5 --waitretry=1 -q -O source.zip "$DOWNLOAD_URL"; then
            log "ERROR" "下载失败：$DOWNLOAD_URL"
            exit 1
          fi

          # 完整性校验
          if ! unzip -t source.zip >/dev/null; then
            log "ERROR" "文件校验失败"
            exit 1
          fi

          # 原子化更新
          TEMP_DIR=$(mktemp -d)
          unzip -qq source.zip -d "$TEMP_DIR"
          
          # 精确文件同步（根据实际项目结构调整）
          rsync -av --delete \
            --exclude='*.min.js' \
            --exclude='*.map' \
            --exclude='.github/' \
            "$TEMP_DIR/" "target-repo/dist/"

          # 更新版本标记
          echo "$TAG_NAME" > target-repo/version.txt
          log "INFO" "成功同步版本：$TAG_NAME"
          echo "new_version=$TAG_NAME" >> $GITHUB_OUTPUT

          # 清理
          rm -rf "$TEMP_DIR" source.zip

      - name: 安全提交
        if: ${{ steps.update.outputs.new_version != '' }}
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          repository: target-repo
          commit_message: "🔄 Worker版本同步：${{ steps.update.outputs.new_version }}"
          branch: main
          file_pattern: |
            version.txt
            dist/
          commit_options: '--signoff'
          push_options: |
            --force-with-lease
            --atomic
          # 添加提交校验
          create_branch_protection_rule: false
