name: Auto Update Worker

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 1 * * *"
  workflow_dispatch:
    inputs:
      force_update:
        description: '是否强制更新（忽略版本检查）'
        type: boolean
        default: false

permissions:
  contents: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  update:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      new_version: ${{ steps.update.outputs.new_version }}
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: worker-repo
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 预安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y pigz jq

      - name: 检查并更新 Worker
        id: update
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          start_time=$(date +%s)
          
          log() { 
            local level=$1
            shift
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] [$level] $@"
          }

          FORCE_UPDATE=${{ inputs.force_update }}
          LOCAL_VERSION=$(cat worker-repo/version.txt 2>/dev/null || echo "0.0.0")
          log "INFO" "开始检查更新（本地版本: $LOCAL_VERSION）"

          # 获取最新版本信息
          REPO_URL="https://api.github.com/repos/bia-pain-bache/BPB-Worker-Panel/releases/latest"
          RESPONSE=$(curl -sS --retry 5 \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "$REPO_URL")

          # 验证响应
          if ! echo "$RESPONSE" | jq -e '.tag_name' >/dev/null; then
            log "ERROR" "API响应无效：$(jq .message <<< "$RESPONSE" || echo "无效响应")"
            exit 1
          fi

          # 解析版本信息
          TAG_NAME=$(jq -r '.tag_name' <<< "$RESPONSE")
          SOURCE_ASSET=$(jq -r ".assets[] | select(.name | contains(\"source\")) | .name" <<< "$RESPONSE" | head -1)

          if [ -z "$SOURCE_ASSET" ]; then
            log "ERROR" "未找到源码包资产"
            exit 1
          fi

          DOWNLOAD_URL=$(jq -r ".assets[] | select(.name == \"$SOURCE_ASSET\") | .browser_download_url" <<< "$RESPONSE")

          # 版本比较
          if [ "$LOCAL_VERSION" = "$TAG_NAME" ] && [ "$FORCE_UPDATE" != "true" ]; then
            log "INFO" "已是最新版本：$TAG_NAME"
            echo "new_version=$TAG_NAME" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 下载源码包
          if ! wget --tries=5 --waitretry=1 -q -O source.zip "$DOWNLOAD_URL"; then
            log "ERROR" "下载失败：$DOWNLOAD_URL"
            exit 1
          fi

          # 解压到临时目录
          TEMP_DIR=$(mktemp -d)
          unzip -qq source.zip -d "$TEMP_DIR"

          # 精确文件同步（排除混淆文件）
          rsync -av --delete \
            --exclude='*.min.js' \
            --exclude='*.map' \
            --exclude='.github/' \
            "$TEMP_DIR/" "worker-repo/dist/"

          # 更新版本标记
          echo "$TAG_NAME" > worker-repo/version.txt
          log "INFO" "成功同步版本：$TAG_NAME"
          echo "new_version=$TAG_NAME" >> $GITHUB_OUTPUT

          # 清理
          rm -rf "$TEMP_DIR" source.zip

      - name: 提交更改
        if: ${{ steps.update.outputs.new_version != '' }}
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          repository: worker-repo
          commit_message: "🔄 Worker源码同步：${{ steps.update.outputs.new_version }}"
          branch: main
          file_pattern: |
            version.txt
            dist/
          commit_options: '--signoff'
          push_options: |
            --force-with-lease
            --atomic
